{"version":3,"sources":["components/edit-dialog.js","utils.js","restrictions.js","actions.js","components/main-menu.js","components/main-page.js","components/app.js","reducer.js","store.js","index.js"],"names":["getErrorParams","value","normalize","validate","errorText","okText","error","helperText","EditDialog","dialogParams","setDialogParams","dialogFields","setDialogFields","onFieldChange","useCallback","event","target","id","name","fieldId","idx","findIndex","el","dialogField","type","controlType","checked","files","newValue","slice","onOkClick","dialogFieldsCopy","forEach","fields","areFieldsValid","okPressed","loading","onCancelClick","open","renderField","fi","props","onChange","autoFocus","label","defaultValue","required","margin","fullWidth","onFocus","select","InputLabelProps","shrink","inputProps","step","TextField","FormControlLabel","control","Checkbox","color","accept","Input","RadioGroup","row","arrValues","map","key","Radio","Dialog","onEscapeKeyDown","DialogTitle","title","DialogContent","Grid","container","direction","style","listStyleType","DialogActions","Button","onClick","CircularProgress","Restrictions","val","trim","length","getFields","idArr","filter","includes","baseURL","authenticate","userData","dispatch","payload","signUp","surname","email","password","role","a","fetch","method","headers","body","JSON","stringify","res","json","status","message","data","Error","signIn","MainMenu","_id","useSelector","state","useDispatch","useState","snackbarParams","setSnackbarParams","defaultDialogParams","mode","undefined","getDefaultEditFields","authHandler","action","params","userMessage","useEffect","getValuesFromFields","justify","alignItems","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","size","aria-label","Close","MainPage","text","Box","mt","mb","VisibilityTwoTone","fontSize","FaceTwoTone","Typography","component","App","className","reducer","initialState","createStore","applyMiddleware","ReduxThunk","darkTheme","createMuiTheme","palette","primary","main","blue","red","ReactDOM","render","ThemeProvider","theme","CssBaseline","Container","maxWidth","store","document","getElementById"],"mappings":"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","file":"static/js/main.47092b34.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\r\nimport {\r\n    Grid, Dialog, DialogTitle, DialogActions,\r\n    DialogContent, TextField, Button, Checkbox, FormControlLabel,\r\n    Input, RadioGroup, Radio, CircularProgress\r\n} from '@material-ui/core';\r\nimport { areFieldsValid } from '../utils';\r\n\r\nconst getErrorParams = ({ value, normalize, validate, errorText, okText }) => {\r\n    if (normalize) value = normalize(value);\r\n    const error = (validate) ? !validate(value) : false;\r\n    const helperText = error ? errorText : okText;\r\n    return {\r\n        value,\r\n        error,\r\n        helperText\r\n    }\r\n}\r\n\r\nconst EditDialog = ({ dialogParams, setDialogParams, dialogFields, setDialogFields }) => {\r\n\r\n    // console.log('Rendering EditDialog');\r\n\r\n    const onFieldChange = useCallback((event) => {\r\n        const { id, name } = event.target;\r\n        const fieldId = (id) ? id : name;\r\n\r\n        const idx = dialogFields.findIndex(el => el.id === fieldId);\r\n\r\n        const dialogField = dialogFields[idx];\r\n        const { type, controlType } = dialogField;\r\n\r\n        let value;\r\n        switch (controlType) {\r\n            case 'Checkbox':\r\n                value = event.target.checked;\r\n                break;\r\n            case 'Input':\r\n                if (type === 'file') {\r\n                    value = event.target.files[0];\r\n                }\r\n                break;\r\n            default:\r\n                value = event.target.value;\r\n        };\r\n\r\n        const { value: newValue, error, helperText } = getErrorParams({ ...dialogField, value });\r\n\r\n        setDialogFields([\r\n            ...dialogFields.slice(0, idx),\r\n            {\r\n                ...dialogFields[idx],\r\n                value: newValue, error, helperText\r\n            },\r\n            ...dialogFields.slice(idx + 1)\r\n        ]);\r\n    }, [dialogFields, setDialogFields]);\r\n\r\n    const onOkClick = useCallback(() => {\r\n        const dialogFieldsCopy = [...dialogFields];\r\n        dialogFieldsCopy.forEach(el => {\r\n            const { value, error, helperText } = getErrorParams(el);\r\n            el.value = value;\r\n            el.error = error;\r\n            el.helperText = helperText;\r\n        });\r\n        setDialogFields([...dialogFieldsCopy]);\r\n\r\n        if (!areFieldsValid(dialogFieldsCopy)) return;\r\n\r\n        setDialogParams({\r\n            ...dialogParams,\r\n            // open: false,\r\n            // open: true,\r\n            okPressed: true,\r\n            loading: true\r\n        });\r\n    }, [dialogParams, dialogFields, setDialogParams, setDialogFields]);\r\n\r\n    const onCancelClick = useCallback(() => {\r\n        setDialogParams({\r\n            ...dialogParams,\r\n            open: false,\r\n            okPressed: false\r\n        });\r\n    }, [dialogParams, setDialogParams]);\r\n\r\n    const renderField = useCallback((fi, idx) => {\r\n        const props = {};\r\n        props.id = fi.id;\r\n        props.onChange = onFieldChange;\r\n        props.autoFocus = (idx === 0);\r\n        switch (fi.controlType) {\r\n            case 'TextField':\r\n                props.label = fi.label;\r\n                props.type = fi.type;\r\n                props.defaultValue = fi.value;\r\n                props.required = fi.required;\r\n                props.helperText = fi.helperText;\r\n                props.error = fi.error;\r\n                props.margin = 'normal';\r\n                props.fullWidth = true;\r\n                props.onFocus = (event) => { event.target.select() };\r\n                if (fi.type === 'time') {\r\n                    props.InputLabelProps = { shrink: true };\r\n                    props.inputProps = { step: fi.step * 60 };\r\n                };\r\n                return (\r\n                    <TextField {...props} />\r\n                );\r\n            case 'Checkbox':\r\n                props.checked = fi.value;\r\n                return (\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox color='primary' {...props} />\r\n                        }\r\n                        label={fi.label}\r\n                    />\r\n                );\r\n            case 'Input':\r\n                props.type = fi.type;\r\n                props.required = fi.required;\r\n                props.error = fi.error;\r\n                props.inputProps = { accept: fi.accept };\r\n                return (\r\n                    <Input {...props} />\r\n                );\r\n            case 'Radio':\r\n                return (\r\n                    <RadioGroup value={fi.value} row>\r\n                        {\r\n                            fi.arrValues.map((el) => {\r\n                                return <FormControlLabel\r\n                                    {...props}\r\n                                    key={el} value={el}\r\n                                    control={<Radio color='primary' />}\r\n                                    name={fi.id}\r\n                                    label={el} />\r\n                            })\r\n                        }\r\n                    </RadioGroup>\r\n                )\r\n            default:\r\n        }\r\n        return null;\r\n    }, [onFieldChange]);\r\n\r\n    return (\r\n        <Dialog open={dialogParams.open} onEscapeKeyDown={onCancelClick}>\r\n            <DialogTitle>{dialogParams.title}</DialogTitle>\r\n            <DialogContent>\r\n                <Grid container direction='column'>\r\n                    {\r\n                        dialogFields.map((fi, idx) => {\r\n                            return (\r\n                                <li key={fi.id} style={{ listStyleType: 'none' }}>\r\n                                    { renderField(fi, idx)}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {\r\n                    !dialogParams.loading && (\r\n                        <Button onClick={onOkClick}>\r\n                            Ok\r\n                        </Button>\r\n                    )\r\n                }\r\n                {\r\n                    dialogParams.loading && (\r\n                        <CircularProgress color='primary' />\r\n                    )\r\n                }\r\n                <Button onClick={onCancelClick}>\r\n                    Cancel\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EditDialog;\r\n","// const _decline = (number, textForms) => {\r\n//     if (number === 0) return '';\r\n//     const n10 = Math.abs(number) % 100;\r\n//     const n = number % 10;\r\n//     if (10 < n10 && n10 < 20) { return textForms[2]; }\r\n//     if (1 < n && n < 5) { return textForms[1]; }\r\n//     if (n == 1) { return textForms[0]; }\r\n//     return textForms[2];\r\n// }\r\n\r\n// const _inWords = (number, textForms) => {\r\n//     if (number <= 0 || 100 <= number ) return '';\r\n\r\n//     const n90 = ['', '', 'двадцать', 'тридцать', 'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто'];\r\n//     const n19 = ['десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать'];\r\n//     const n9 = ['', 'одна', 'две', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять'];\r\n\r\n//     const arr = [];\r\n//     if (10 <= number && number < 20) arr.push(n19[number % 10]);\r\n//     else {\r\n//         if (number >= 20) arr.push(n90[Math.floor(number / 10)]);\r\n//         const n = number % 10;\r\n//         if (n !== 0) arr.push(n9[n]);\r\n//     };\r\n//     return arr.join(' ') + ' ' + _decline(number, textForms);\r\n// }\r\n\r\n// const _getTextTimeRu = (holdingTime) => {\r\n//     const arr = holdingTime.split(':');\r\n//     const minutes = Number(arr[0]);\r\n//     const seconds = Number(arr[1]);\r\n//     return (_inWords(minutes, ['минута', 'минуты', 'минут'])\r\n//         + ' '\r\n//         + _inWords(seconds, ['секунда', 'секунды', 'секунд'])).trim();\r\n// };\r\n\r\n// const _getTextTime = (holdingTime) => {\r\n//     const arr = holdingTime.split(':');\r\n//     const minutes = Number(arr[0]);\r\n//     const seconds = Number(arr[1]);\r\n//     let res = '';\r\n//     switch (minutes) {\r\n//         case 0:\r\n//             break;\r\n//         case 1:\r\n//             res += '1 minute';\r\n//             break;\r\n//         default:\r\n//             res += `${minutes} minutes`;\r\n//             break;\r\n//     };\r\n//     switch (seconds) {\r\n//         case 0:\r\n//             break;\r\n//         case 1:\r\n//             res += ' 1 second';\r\n//             break;\r\n//         default:\r\n//             res += ` ${seconds} seconds`;\r\n//             break;\r\n//     };\r\n//     return res.trim();\r\n// };\r\n\r\n// const formatDate = (date) => {\r\n//     return `${date.getFullYear()}-${twoDigits(date.getMonth())}-${twoDigits(date.getDate())}`;\r\n// }\r\n\r\n// const seconds = (holdingTime) => {\r\n//     const arr = holdingTime.split(':');\r\n//     return Number(arr[0]) * 60 + Number(arr[1]);\r\n// };\r\n\r\n// const totalTime = ({ sets, isTwoSided, holdingTime }, preparationTime) => {\r\n//     return (seconds(holdingTime) + preparationTime) * sets * (isTwoSided ? 2 : 1);\r\n// };\r\n\r\n// const twoDigits = (val) => {\r\n//     return ('0' + String(val)).slice(-2);\r\n// }\r\n\r\n// const formatTime = (seconds, withLeadingZero = false) => {\r\n//     const min = Math.floor(seconds / 60);\r\n//     const sec = Math.round(seconds % 60);\r\n//     return (withLeadingZero ? twoDigits(min) : min) + ':' + twoDigits(sec);\r\n// }\r\n\r\nconst setValuesToFields = (obj, fields) => {\r\n    return fields.map(el => {\r\n        return {\r\n            ...el,\r\n            value: obj[el.id]\r\n        }\r\n    })\r\n}\r\n\r\nconst getValuesFromFields = (fields) => {\r\n    const res = {};\r\n    fields.forEach(el => {\r\n        res[el.id] = el.value;\r\n    });\r\n    return res;\r\n}\r\n\r\nconst areFieldsValid = (fields) => {\r\n    for (const el of fields) {\r\n        if (el.error) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {\r\n    setValuesToFields,\r\n    getValuesFromFields,\r\n    areFieldsValid\r\n};\r\n\r\n","export default class Restrictions {\r\n\r\n    fields = [\r\n        {\r\n            id: 'name',\r\n            label: 'Name:',\r\n            controlType: 'TextField',\r\n            type: 'text',\r\n            required: true,\r\n            value: 'John',\r\n            error: false,\r\n            helperText: '',\r\n            okText: '',\r\n            normalize: (val) => { return val.trim() },\r\n            validate: (val) => { return val.length !== 0 },\r\n            errorText: 'Shouldn\\'t be empty'\r\n        },\r\n        {\r\n            id: 'surname',\r\n            label: 'Surname:',\r\n            controlType: 'TextField',\r\n            type: 'text',\r\n            required: true,\r\n            value: 'Smith',\r\n            error: false,\r\n            helperText: '',\r\n            okText: '',\r\n            normalize: (val) => { return val.trim() },\r\n            validate: (val) => { return val.length !== 0 },\r\n            errorText: 'Shouldn\\'t be empty'\r\n        },\r\n        {\r\n            id: 'email',\r\n            label: 'E-mail:',\r\n            controlType: 'TextField',\r\n            type: 'text',\r\n            required: true,\r\n            value: 'john.smith@gmail.com',\r\n            error: false,\r\n            helperText: '',\r\n            okText: '',\r\n            normalize: (val) => { return val.trim() },\r\n            validate: (val) => { return val.length !== 0 },\r\n            errorText: 'Shouldn\\'t be empty'\r\n        },\r\n        {\r\n            id: 'password',\r\n            label: 'Password:',\r\n            controlType: 'TextField',\r\n            type: 'password',\r\n            required: true,\r\n            value: '123456',\r\n            error: false,\r\n            helperText: '',\r\n            okText: '',\r\n            normalize: (val) => { return val.trim() },\r\n            validate: (val) => { return val.length >= 6 },\r\n            errorText: 'Should be at least 6 symbols'\r\n        },\r\n        {\r\n            id: 'role',\r\n            controlType: 'Radio',\r\n            type: 'text',\r\n            required: true,\r\n            value: 'user',\r\n            arrValues: ['admin', 'user'],\r\n            error: false,\r\n        }\r\n    ]\r\n\r\n    getFields = (idArr) => {\r\n        return this.fields.filter(el => idArr.includes(el.id));\r\n    }\r\n\r\n}","// const baseURL = 'http://localhost:8080/api/users';\r\nconst baseURL = 'http://anna-shvetsova.h1n.ru/api/users';\r\n\r\nconst logout = () => {\r\n    return {\r\n        type: 'LOGOUT'\r\n    }\r\n}\r\n\r\nconst authenticate = (userData) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: 'AUTHENTICATE',\r\n            payload: userData\r\n        })\r\n    }\r\n};\r\n\r\nconst signUp = ({ name, surname, email, password, role }) => {\r\n    return async (dispatch) => {\r\n        const res = await fetch(`${baseURL}/signUp`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name,\r\n                surname,\r\n                email,\r\n                password,\r\n                role\r\n            })\r\n        });\r\n        const { status, message, data } = await res.json();\r\n        if (status !== 'success') {\r\n            throw Error(message);\r\n        };\r\n        dispatch(authenticate(data));\r\n    }\r\n}\r\n\r\nconst signIn = ({ email, password }) => {\r\n    return async (dispatch) => {\r\n        const res = await fetch(`${baseURL}/signIn`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password,\r\n            })\r\n        });\r\n        const { status, message, data } = await res.json();\r\n        if (status !== 'success') {\r\n            throw Error(message);\r\n        };\r\n        dispatch(authenticate(data));\r\n    }\r\n}\r\n\r\nexport {\r\n    signUp,\r\n    signIn,\r\n    logout\r\n}","import React, { Fragment, useState, useCallback, useEffect } from 'react';\r\nimport { Button, Grid, Snackbar } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport EditDialog from './edit-dialog';\r\nimport Restrictions from '../restrictions';\r\nimport { getValuesFromFields } from '../utils';\r\nimport { signUp, signIn, logout } from '../actions';\r\n\r\nconst MainMenu = () => {\r\n    const { _id } = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n    const [snackbarParams, setSnackbarParams] = useState({ open: false, message: '' });\r\n\r\n    const defaultDialogParams = {\r\n        open: false,\r\n        title: '',\r\n        mode: undefined,\r\n        okPressed: false,\r\n        loading: false\r\n    };\r\n    const [dialogParams, setDialogParams] = useState(defaultDialogParams);\r\n    const [dialogFields, setDialogFields] = useState([]);\r\n\r\n    const getDefaultEditFields = useCallback((mode) => {\r\n        const restr = new Restrictions();\r\n        const fields = (mode === 'signUp') ?\r\n            ['name', 'surname', 'email', 'password', 'role'] :\r\n            ['email', 'password'];\r\n        return restr.getFields(fields);\r\n    }, []);\r\n\r\n    const onSignupClick = () => {\r\n        setDialogFields(getDefaultEditFields('signUp'));\r\n        setDialogParams({\r\n            ...defaultDialogParams,\r\n            open: true,\r\n            title: 'Signing up',\r\n            mode: 'SIGNUP'\r\n        });\r\n    }\r\n\r\n    const onSigninClick = () => {\r\n        setDialogFields(getDefaultEditFields('signIn'));\r\n        setDialogParams({\r\n            ...defaultDialogParams,\r\n            open: true,\r\n            title: 'Signing in',\r\n            mode: 'SIGNIN'\r\n        });\r\n    }\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(logout());\r\n    }\r\n\r\n    const authHandler = useCallback(async (action, params) => {\r\n        try {\r\n            await dispatch(action(params));\r\n            setDialogParams({ ...dialogParams, okPressed: false, open: false });\r\n        } catch (err) {\r\n            let userMessage='';\r\n            switch (err.message) {\r\n                case 'INVALID_PASSWORD':\r\n                    userMessage = 'Pair email/password isn\\'t correct';\r\n                    break;\r\n                case 'EMAIL_NOT_FOUND':\r\n                    userMessage = 'There is no user registered under such email';\r\n                    break;\r\n                case 'EMAIL_EXISTS':\r\n                    userMessage = 'User with such an email already exists';\r\n                    break;\r\n                default:\r\n                    userMessage = err.message;\r\n            }\r\n            setSnackbarParams({ open: true, message: userMessage });\r\n            setDialogParams({ ...dialogParams, okPressed: false, loading: false });\r\n        }\r\n    }, [dialogParams, setDialogParams, dispatch]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (!dialogParams.okPressed) return;\r\n        const params = getValuesFromFields(dialogFields);\r\n        switch (dialogParams.mode) {\r\n            case 'SIGNUP':\r\n                authHandler(signUp, params);\r\n                break;\r\n            case 'SIGNIN':\r\n                authHandler(signIn, params);\r\n                break;\r\n            default:\r\n        }\r\n        \r\n    }, [dialogParams, dialogFields, authHandler])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container direction='row' justify='flex-end' alignItems='center'>\r\n                {!_id &&\r\n                    <Button\r\n                        onClick={onSignupClick}\r\n                    >\r\n                        Sign up\r\n                        </Button>\r\n                }\r\n                {!_id &&\r\n                    <Button\r\n                        onClick={onSigninClick}\r\n                    >\r\n                        Sign in\r\n                        </Button>\r\n                }\r\n                {_id &&\r\n                    <Button\r\n                        onClick={onLogoutClick}\r\n                    >\r\n                        Log out\r\n                        </Button>\r\n                }\r\n            </Grid>\r\n            {\r\n                dialogParams.open &&\r\n                <EditDialog\r\n                    dialogParams={dialogParams}\r\n                    setDialogParams={setDialogParams}\r\n                    dialogFields={dialogFields}\r\n                    setDialogFields={setDialogFields}\r\n                />\r\n            }\r\n            <Snackbar\r\n                open={snackbarParams.open}\r\n                message={snackbarParams.message}\r\n                anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n                autoHideDuration={6000}\r\n                onClose={() => setSnackbarParams({ open: false })}\r\n                action={\r\n                    <Fragment>\r\n                        <Button size='small' aria-label='close' color='secondary' onClick={() => setSnackbarParams({ open: false })}>\r\n                            <Close />\r\n                        </Button>\r\n                    </Fragment>\r\n                }\r\n            />\r\n        </Fragment>\r\n        // <h2>This is MainMenu</h2>\r\n    )\r\n}\r\n\r\nexport default MainMenu;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Grid, Typography, Box } from '@material-ui/core';\r\nimport { VisibilityTwoTone, FaceTwoTone } from '@material-ui/icons';\r\n\r\nconst MainPage = () => {\r\n    const { _id, name, surname, role } = useSelector(state => state);\r\n    const text = (_id) ? `Hello ${name} ${surname}` : 'Authenticate please';\r\n    return (\r\n        <Grid container direction='column' alignItems='center'>\r\n            <Box mt={.2} mb={.2}>\r\n                {_id && (role === 'admin') && <VisibilityTwoTone color='primary' fontSize='large' />}\r\n                {_id && (role === 'user') && <FaceTwoTone color='primary' fontSize='large' />}\r\n            </Box>\r\n            <Typography component='p'>{text}</Typography>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport MainMenu from './main-menu';\nimport MainPage from './main-page';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<MainMenu />\n\t\t\t<MainPage />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reducer = (state, action) => {\r\n\r\n    const initialState = {\r\n        _id: null,\r\n        name: null,\r\n        surname: null,\r\n        email: null,\r\n        role: null\r\n    };\r\n\r\n    if (state === undefined) return initialState;\r\n\r\n    switch (action.type) {\r\n        case 'AUTHENTICATE':\r\n            const { _id, name, surname, email, role } = action.payload;\r\n            return {\r\n                ...state,\r\n                _id,\r\n                name,\r\n                surname,\r\n                email,\r\n                role\r\n            };\r\n        case 'LOGOUT': \r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\nexport default createStore(reducer, applyMiddleware(ReduxThunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { CssBaseline, Container, ThemeProvider, createMuiTheme } from '@material-ui/core';\nimport { blue, red } from '@material-ui/core/colors';\n\nimport App from './components/app';\nimport store from './store';\n\nconst darkTheme = createMuiTheme({\n\tpalette: {\n\t\ttype: 'dark',\n\t\tprimary: {\n\t\t\tmain: blue[200],\n\t\t},\n\t\terror: {\n\t\t\tmain: red[200],\n\t\t}\n\t}\n});\n\nReactDOM.render(\n\t<ThemeProvider theme={darkTheme}>\n\t\t<CssBaseline />\n\t\t<Container maxWidth='sm'>\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>\n\t\t</Container>\n\t</ThemeProvider>\n\t, document.getElementById('root')\n);\n\n"],"sourceRoot":""}